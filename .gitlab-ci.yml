stages:
  - build
  - deploy

variables:
  TF_VERSION: "1.5.2"  # Versão do Terraform a ser utilizada
  AWS_REGION: "sa-east-1"  # Região da AWS
  TF_STATE_BUCKET: "app-gp2-s3"  # Nome do bucket do estado do Terraform
  AWS_ACCESS_KEY_ID: "AKIAV4YTWNKPKD6RT6WF"  # Chave de acesso da AWS
  AWS_SECRET_ACCESS_KEY: "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"  # Chave secreta de acesso da AWS

before_script:
  - apt-get update
  - apt-get install -y openssl openssh-client unzip
  - wget "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"
  - rm -rf terraform  # Remover o diretório "terraform" se existir
  - unzip -o "terraform_${TF_VERSION}_linux_amd64.zip"
  - mv terraform /usr/bin/
  - rm "terraform_${TF_VERSION}_linux_amd64.zip"
  - terraform --version

build:
  stage: build
  image: maven:latest
  script:
    - mvn clean package
    - mvn test
  artifacts:
    paths:
      - target/*.jar

deploy:
  stage: deploy
  image: maven:latest
  script:
    - mvn clean package
    - apt-get update
    - apt-get install -y curl
    - apt-get install -y gnupg
    - echo "deb [arch=amd64 signed-by=/usr/share/keyrings/hashicorp.gpg] https://apt.releases.hashicorp.com focal main" > /etc/apt/sources.list.d/hashicorp.list
    - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp.gpg >/dev/null
    - apt-get update
    - apt-get install -y terraform
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - ls
    - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=terraform.tfstate" -backend-config="region=${AWS_REGION}"
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
    - apt-get install -y awscli

    # Configurações de implantação com CodeDeploy
    - aws deploy create-application --application-name g2-odecasa-dev

    - aws deploy create-deployment-group \
        --application-name g2-odecasa-dev \
        --deployment-group-name back-prod \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        --service-role-arn "arn:aws:iam::405378853534:role/GP2-User" \
        --ec2-tag-filters "Key=tag_key_1,Value=DEPLOY,Type=KEY_AND_VALUE" "Key=tag_key_2,Value=GP2,Type=KEY_AND_VALUE" "Key=tag_key_3,Value=DEV,Type=KEY_AND_VALUE" "Key=tag_key_4,Value=BACK,Type=KEY_AND_VALUE"

    # Copiar o arquivo JAR para o CodeDeploy
    - aws s3 cp target/*.jar s3://NOME_DO_BUCKET/

    # Criar um arquivo appspec.yml para configurar a implantação
    - echo "version: 0.0" >> appspec.yml
    - echo "os: linux" >> appspec.yml
    - echo "files:" >> appspec.yml
    - echo "  - source: /" >> appspec.yml
    - echo "    destination: /app" >> appspec.yml
    - echo "hooks:" >> appspec.yml
    - echo "  ApplicationStop:" >> appspec.yml
    - echo "    - location: scripts/stop.sh" >> appspec.yml
    - echo "      timeout: 300" >> appspec.yml
    - echo "  ApplicationStart:" >> appspec.yml
    - echo "    - location: scripts/start.sh" >> appspec.yml
    - echo "      timeout: 300" >> appspec.yml

    # Crie os scripts stop.sh e start.sh
    - mkdir scripts
    - echo "#!/bin/bash" >> scripts/stop.sh
    - echo "docker-compose -f /app/docker-compose.yml down" >> scripts/stop.sh
    - echo "#!/bin/bash" >> scripts/start.sh

  only:
  - main
  - dev-back
